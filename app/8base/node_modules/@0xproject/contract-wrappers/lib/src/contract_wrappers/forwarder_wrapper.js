"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var json_schemas_1 = require("@0xproject/json-schemas");
var _ = require("lodash");
var artifacts_1 = require("../artifacts");
var tx_opts_schema_1 = require("../schemas/tx_opts_schema");
var assert_1 = require("../utils/assert");
var calldata_optimization_utils_1 = require("../utils/calldata_optimization_utils");
var constants_1 = require("../utils/constants");
var utils_1 = require("../utils/utils");
var contract_wrapper_1 = require("./contract_wrapper");
var forwarder_1 = require("./generated/forwarder");
/**
 * This class includes the functionality related to interacting with the Forwarder contract.
 */
var ForwarderWrapper = /** @class */ (function (_super) {
    __extends(ForwarderWrapper, _super);
    function ForwarderWrapper(web3Wrapper, networkId, contractAddressIfExists, zrxContractAddressIfExists) {
        var _this = _super.call(this, web3Wrapper, networkId) || this;
        _this.abi = artifacts_1.artifacts.Forwarder.compilerOutput.abi;
        _this._contractAddressIfExists = contractAddressIfExists;
        _this._zrxContractAddressIfExists = zrxContractAddressIfExists;
        return _this;
    }
    /**
     * Purchases as much of orders' makerAssets as possible by selling up to 95% of transaction's ETH value.
     * Any ZRX required to pay fees for primary orders will automatically be purchased by this contract.
     * 5% of ETH value is reserved for paying fees to order feeRecipients (in ZRX) and forwarding contract feeRecipient (in ETH).
     * Any ETH not spent will be refunded to sender.
     * @param   signedOrders         An array of objects that conform to the SignedOrder interface. All orders must specify the same makerAsset.
     *                               All orders must specify WETH as the takerAsset
     * @param   takerAddress         The user Ethereum address who would like to fill this order. Must be available via the supplied
     *                               Provider provided at instantiation.
     * @param   ethAmount            The amount of eth to send with the transaction (in wei).
     * @param   signedFeeOrders      An array of objects that conform to the SignedOrder interface. All orders must specify ZRX as makerAsset and WETH as takerAsset.
     *                               Used to purchase ZRX for primary order fees.
     * @param   feePercentage        The percentage of WETH sold that will payed as fee to forwarding contract feeRecipient.
     *                               Defaults to 0.
     * @param   feeRecipientAddress  The address that will receive ETH when signedFeeOrders are filled.
     * @param   txOpts               Transaction parameters.
     * @return  Transaction hash.
     */
    ForwarderWrapper.prototype.marketSellOrdersWithEthAsync = function (signedOrders, takerAddress, ethAmount, signedFeeOrders, feePercentage, feeRecipientAddress, txOpts) {
        if (signedFeeOrders === void 0) { signedFeeOrders = []; }
        if (feePercentage === void 0) { feePercentage = 0; }
        if (feeRecipientAddress === void 0) { feeRecipientAddress = constants_1.constants.NULL_ADDRESS; }
        if (txOpts === void 0) { txOpts = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var formattedFeePercentage, normalizedTakerAddress, normalizedFeeRecipientAddress, optimizedMarketOrders, optimizedFeeOrders, forwarderContractInstance, txHash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // type assertions
                        assert_1.assert.doesConformToSchema('signedOrders', signedOrders, json_schemas_1.schemas.signedOrdersSchema);
                        return [4 /*yield*/, assert_1.assert.isSenderAddressAsync('takerAddress', takerAddress, this._web3Wrapper)];
                    case 1:
                        _a.sent();
                        assert_1.assert.isBigNumber('ethAmount', ethAmount);
                        assert_1.assert.doesConformToSchema('signedFeeOrders', signedFeeOrders, json_schemas_1.schemas.signedOrdersSchema);
                        assert_1.assert.isNumber('feePercentage', feePercentage);
                        assert_1.assert.isETHAddressHex('feeRecipientAddress', feeRecipientAddress);
                        assert_1.assert.doesConformToSchema('txOpts', txOpts, tx_opts_schema_1.txOptsSchema);
                        // other assertions
                        assert_1.assert.ordersCanBeUsedForForwarderContract(signedOrders, this.getEtherTokenAddress());
                        assert_1.assert.feeOrdersCanBeUsedForForwarderContract(signedFeeOrders, this.getZRXTokenAddress(), this.getEtherTokenAddress());
                        formattedFeePercentage = utils_1.utils.numberPercentageToEtherTokenAmountPercentage(feePercentage);
                        normalizedTakerAddress = takerAddress.toLowerCase();
                        normalizedFeeRecipientAddress = feeRecipientAddress.toLowerCase();
                        optimizedMarketOrders = calldata_optimization_utils_1.calldataOptimizationUtils.optimizeForwarderOrders(signedOrders);
                        optimizedFeeOrders = calldata_optimization_utils_1.calldataOptimizationUtils.optimizeForwarderFeeOrders(signedFeeOrders);
                        return [4 /*yield*/, this._getForwarderContractAsync()];
                    case 2:
                        forwarderContractInstance = _a.sent();
                        return [4 /*yield*/, forwarderContractInstance.marketSellOrdersWithEth.sendTransactionAsync(optimizedMarketOrders, _.map(optimizedMarketOrders, function (order) { return order.signature; }), optimizedFeeOrders, _.map(optimizedFeeOrders, function (order) { return order.signature; }), formattedFeePercentage, feeRecipientAddress, {
                                value: ethAmount,
                                from: normalizedTakerAddress,
                                gas: txOpts.gasLimit,
                                gasPrice: txOpts.gasPrice,
                            })];
                    case 3:
                        txHash = _a.sent();
                        return [2 /*return*/, txHash];
                }
            });
        });
    };
    /**
     * Attempt to purchase makerAssetFillAmount of makerAsset by selling ethAmount provided with transaction.
     * Any ZRX required to pay fees for primary orders will automatically be purchased by the contract.
     * Any ETH not spent will be refunded to sender.
     * @param   signedOrders         An array of objects that conform to the SignedOrder interface. All orders must specify the same makerAsset.
     *                               All orders must specify WETH as the takerAsset
     * @param   makerAssetFillAmount The amount of the order (in taker asset baseUnits) that you wish to fill.
     * @param   takerAddress         The user Ethereum address who would like to fill this order. Must be available via the supplied
     *                               Provider provided at instantiation.
     * @param   ethAmount            The amount of eth to send with the transaction (in wei).
     * @param   signedFeeOrders      An array of objects that conform to the SignedOrder interface. All orders must specify ZRX as makerAsset and WETH as takerAsset.
     *                               Used to purchase ZRX for primary order fees.
     * @param   feePercentage        The percentage of WETH sold that will payed as fee to forwarding contract feeRecipient.
     *                               Defaults to 0.
     * @param   feeRecipientAddress  The address that will receive ETH when signedFeeOrders are filled.
     * @param   txOpts               Transaction parameters.
     * @return  Transaction hash.
     */
    ForwarderWrapper.prototype.marketBuyOrdersWithEthAsync = function (signedOrders, makerAssetFillAmount, takerAddress, ethAmount, signedFeeOrders, feePercentage, feeRecipientAddress, txOpts) {
        if (signedFeeOrders === void 0) { signedFeeOrders = []; }
        if (feePercentage === void 0) { feePercentage = 0; }
        if (feeRecipientAddress === void 0) { feeRecipientAddress = constants_1.constants.NULL_ADDRESS; }
        if (txOpts === void 0) { txOpts = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var formattedFeePercentage, normalizedTakerAddress, normalizedFeeRecipientAddress, optimizedMarketOrders, optimizedFeeOrders, forwarderContractInstance, txHash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // type assertions
                        assert_1.assert.doesConformToSchema('signedOrders', signedOrders, json_schemas_1.schemas.signedOrdersSchema);
                        assert_1.assert.isBigNumber('makerAssetFillAmount', makerAssetFillAmount);
                        return [4 /*yield*/, assert_1.assert.isSenderAddressAsync('takerAddress', takerAddress, this._web3Wrapper)];
                    case 1:
                        _a.sent();
                        assert_1.assert.isBigNumber('ethAmount', ethAmount);
                        assert_1.assert.doesConformToSchema('signedFeeOrders', signedFeeOrders, json_schemas_1.schemas.signedOrdersSchema);
                        assert_1.assert.isNumber('feePercentage', feePercentage);
                        assert_1.assert.isETHAddressHex('feeRecipientAddress', feeRecipientAddress);
                        assert_1.assert.doesConformToSchema('txOpts', txOpts, tx_opts_schema_1.txOptsSchema);
                        // other assertions
                        assert_1.assert.ordersCanBeUsedForForwarderContract(signedOrders, this.getEtherTokenAddress());
                        assert_1.assert.feeOrdersCanBeUsedForForwarderContract(signedFeeOrders, this.getZRXTokenAddress(), this.getEtherTokenAddress());
                        formattedFeePercentage = utils_1.utils.numberPercentageToEtherTokenAmountPercentage(feePercentage);
                        normalizedTakerAddress = takerAddress.toLowerCase();
                        normalizedFeeRecipientAddress = feeRecipientAddress.toLowerCase();
                        optimizedMarketOrders = calldata_optimization_utils_1.calldataOptimizationUtils.optimizeForwarderOrders(signedOrders);
                        optimizedFeeOrders = calldata_optimization_utils_1.calldataOptimizationUtils.optimizeForwarderFeeOrders(signedFeeOrders);
                        return [4 /*yield*/, this._getForwarderContractAsync()];
                    case 2:
                        forwarderContractInstance = _a.sent();
                        return [4 /*yield*/, forwarderContractInstance.marketBuyOrdersWithEth.sendTransactionAsync(optimizedMarketOrders, makerAssetFillAmount, _.map(optimizedMarketOrders, function (order) { return order.signature; }), optimizedFeeOrders, _.map(optimizedFeeOrders, function (order) { return order.signature; }), formattedFeePercentage, feeRecipientAddress, {
                                value: ethAmount,
                                from: normalizedTakerAddress,
                                gas: txOpts.gasLimit,
                                gasPrice: txOpts.gasPrice,
                            })];
                    case 3:
                        txHash = _a.sent();
                        return [2 /*return*/, txHash];
                }
            });
        });
    };
    /**
     * Retrieves the Ethereum address of the Forwarder contract deployed on the network
     * that the user-passed web3 provider is connected to.
     * @returns The Ethereum address of the Forwarder contract being used.
     */
    ForwarderWrapper.prototype.getContractAddress = function () {
        var contractAddress = this._getContractAddress(artifacts_1.artifacts.Forwarder, this._contractAddressIfExists);
        return contractAddress;
    };
    /**
     * Returns the ZRX token address used by the forwarder contract.
     * @return Address of ZRX token
     */
    ForwarderWrapper.prototype.getZRXTokenAddress = function () {
        var contractAddress = this._getContractAddress(artifacts_1.artifacts.ZRXToken, this._zrxContractAddressIfExists);
        return contractAddress;
    };
    /**
     * Returns the Ether token address used by the forwarder contract.
     * @return Address of Ether token
     */
    ForwarderWrapper.prototype.getEtherTokenAddress = function () {
        var contractAddress = this._getContractAddress(artifacts_1.artifacts.EtherToken);
        return contractAddress;
    };
    // HACK: We don't want this method to be visible to the other units within that package but not to the end user.
    // TS doesn't give that possibility and therefore we make it private and access it over an any cast. Because of that tslint sees it as unused.
    // tslint:disable-next-line:no-unused-variable
    ForwarderWrapper.prototype._invalidateContractInstance = function () {
        delete this._forwarderContractIfExists;
    };
    ForwarderWrapper.prototype._getForwarderContractAsync = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, abi, address, contractInstance;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!_.isUndefined(this._forwarderContractIfExists)) {
                            return [2 /*return*/, this._forwarderContractIfExists];
                        }
                        return [4 /*yield*/, this._getContractAbiAndAddressFromArtifactsAsync(artifacts_1.artifacts.Forwarder, this._contractAddressIfExists)];
                    case 1:
                        _a = __read.apply(void 0, [_b.sent(), 2]), abi = _a[0], address = _a[1];
                        contractInstance = new forwarder_1.ForwarderContract(abi, address, this._web3Wrapper.getProvider(), this._web3Wrapper.getContractDefaults());
                        this._forwarderContractIfExists = contractInstance;
                        return [2 /*return*/, this._forwarderContractIfExists];
                }
            });
        });
    };
    return ForwarderWrapper;
}(contract_wrapper_1.ContractWrapper));
exports.ForwarderWrapper = ForwarderWrapper;
//# sourceMappingURL=forwarder_wrapper.js.map