import { AssetProxyId } from '@0xproject/types';
import { Web3Wrapper } from '@0xproject/web3-wrapper';
import { ContractAbi } from 'ethereum-types';
import { ContractWrapper } from './contract_wrapper';
/**
 * This class includes the functionality related to interacting with the ERC721Proxy contract.
 */
export declare class ERC721ProxyWrapper extends ContractWrapper {
    abi: ContractAbi;
    private _erc721ProxyContractIfExists?;
    private _contractAddressIfExists?;
    /**
     * Instantiate ERC721ProxyWrapper
     * @param web3Wrapper Web3Wrapper instance to use
     * @param networkId Desired networkId
     * @param contractAddressIfExists The contract address to use. This is usually pulled from
     * the artifacts but needs to be specified when using with your own custom testnet.
     */
    constructor(web3Wrapper: Web3Wrapper, networkId: number, contractAddressIfExists?: string);
    /**
     * Get the 4 bytes ID of this asset proxy
     * @return  Proxy id
     */
    getProxyIdAsync(): Promise<AssetProxyId>;
    /**
     * Check if the Exchange contract address is authorized by the ERC721Proxy contract.
     * @param   exchangeContractAddress     The hex encoded address of the Exchange contract to call.
     * @return  Whether the exchangeContractAddress is authorized.
     */
    isAuthorizedAsync(exchangeContractAddress: string): Promise<boolean>;
    /**
     * Get the list of all Exchange contract addresses authorized by the ERC721Proxy contract.
     * @return  The list of authorized addresses.
     */
    getAuthorizedAddressesAsync(): Promise<string[]>;
    /**
     * Retrieves the Ethereum address of the ERC721Proxy contract deployed on the network
     * that the user-passed web3 provider is connected to.
     * @returns The Ethereum address of the ERC721Proxy contract being used.
     */
    getContractAddress(): string;
    private _invalidateContractInstance;
    private _getERC721ProxyContractAsync;
}
//# sourceMappingURL=erc721_proxy_wrapper.d.ts.map