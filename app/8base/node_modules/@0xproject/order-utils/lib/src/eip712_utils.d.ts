/// <reference types="node" />
import { EIP712Schema } from './types';
export declare const eip712Utils: {
    /**
     * Compiles the EIP712Schema and returns the hash of the schema.
     * @param   schema The EIP712 schema.
     * @return  The hash of the compiled schema
     */
    compileSchema(schema: EIP712Schema): Buffer;
    /**
     * Merges the EIP712 hash of a struct with the DomainSeparator for 0x v2.
     * @param   hashStruct the EIP712 hash of a struct
     * @param   contractAddress the exchange contract address
     * @return  The hash of an EIP712 message with domain separator prefixed
     */
    createEIP712Message(hashStruct: Buffer, contractAddress: string): Buffer;
    /**
     * Pad an address to 32 bytes
     * @param address Address to pad
     * @return padded address
     */
    pad32Address(address: string): Buffer;
    /**
     * Pad an buffer to 32 bytes
     * @param buffer Address to pad
     * @return padded buffer
     */
    pad32Buffer(buffer: Buffer): Buffer;
    /**
     * Hash together a EIP712 schema with the corresponding data
     * @param schema EIP712-compliant schema
     * @param data Data the complies to the schema
     * @return A buffer containing the SHA256 hash of the schema and encoded data
     */
    structHash(schema: EIP712Schema, data: {
        [key: string]: any;
    }): Buffer;
    _getDomainSeparatorSchemaBuffer(): Buffer;
    _getDomainSeparatorHashBuffer(exchangeAddress: string): Buffer;
    _encodeType(schema: EIP712Schema): string;
    _encodeData(schema: EIP712Schema, data: {
        [key: string]: any;
    }): any;
};
//# sourceMappingURL=eip712_utils.d.ts.map