"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var json_schemas_1 = require("@0xproject/json-schemas");
var types_1 = require("@0xproject/types");
var web3_wrapper_1 = require("@0xproject/web3-wrapper");
var ethUtil = require("ethereumjs-util");
var _ = require("lodash");
var artifacts_1 = require("./artifacts");
var assert_1 = require("./assert");
var exchange_1 = require("./generated_contract_wrappers/exchange");
var i_validator_1 = require("./generated_contract_wrappers/i_validator");
var i_wallet_1 = require("./generated_contract_wrappers/i_wallet");
var types_2 = require("./types");
var utils_1 = require("./utils");
exports.signatureUtils = {
    /**
     * Verifies that the provided signature is valid according to the 0x Protocol smart contracts
     * @param   data          The hex encoded data signed by the supplied signature.
     * @param   signature     A hex encoded 0x Protocol signature made up of: [TypeSpecificData][SignatureType].
     *          E.g [vrs][SignatureType.EIP712]
     * @param   signerAddress The hex encoded address that signed the data, producing the supplied signature.
     * @return  Whether the signature is valid for the supplied signerAddress and data.
     */
    isValidSignatureAsync: function (provider, data, signature, signerAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var signatureTypeIndexIfExists, _a, ecSignature, ecSignature, prefixedMessageHex, isValid, isValid;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        assert_1.assert.isWeb3Provider('provider', provider);
                        assert_1.assert.isHexString('data', data);
                        assert_1.assert.isHexString('signature', signature);
                        assert_1.assert.isETHAddressHex('signerAddress', signerAddress);
                        signatureTypeIndexIfExists = utils_1.utils.getSignatureTypeIndexIfExists(signature);
                        if (_.isUndefined(signatureTypeIndexIfExists)) {
                            throw new Error("Unrecognized signatureType in signature: " + signature);
                        }
                        _a = signatureTypeIndexIfExists;
                        switch (_a) {
                            case types_1.SignatureType.Illegal: return [3 /*break*/, 1];
                            case types_1.SignatureType.Invalid: return [3 /*break*/, 1];
                            case types_1.SignatureType.EIP712: return [3 /*break*/, 2];
                            case types_1.SignatureType.EthSign: return [3 /*break*/, 3];
                            case types_1.SignatureType.Wallet: return [3 /*break*/, 4];
                            case types_1.SignatureType.Validator: return [3 /*break*/, 6];
                            case types_1.SignatureType.PreSigned: return [3 /*break*/, 8];
                        }
                        return [3 /*break*/, 9];
                    case 1: return [2 /*return*/, false];
                    case 2:
                        {
                            ecSignature = exports.signatureUtils.parseECSignature(signature);
                            return [2 /*return*/, exports.signatureUtils.isValidECSignature(data, ecSignature, signerAddress)];
                        }
                        _b.label = 3;
                    case 3:
                        {
                            ecSignature = exports.signatureUtils.parseECSignature(signature);
                            prefixedMessageHex = exports.signatureUtils.addSignedMessagePrefix(data, types_1.SignerType.Default);
                            return [2 /*return*/, exports.signatureUtils.isValidECSignature(prefixedMessageHex, ecSignature, signerAddress)];
                        }
                        _b.label = 4;
                    case 4: return [4 /*yield*/, exports.signatureUtils.isValidWalletSignatureAsync(provider, data, signature, signerAddress)];
                    case 5:
                        isValid = _b.sent();
                        return [2 /*return*/, isValid];
                    case 6: return [4 /*yield*/, exports.signatureUtils.isValidValidatorSignatureAsync(provider, data, signature, signerAddress)];
                    case 7:
                        isValid = _b.sent();
                        return [2 /*return*/, isValid];
                    case 8:
                        {
                            return [2 /*return*/, exports.signatureUtils.isValidPresignedSignatureAsync(provider, data, signerAddress)];
                        }
                        _b.label = 9;
                    case 9: throw new Error("Unhandled SignatureType: " + signatureTypeIndexIfExists);
                }
            });
        });
    },
    /**
     * Verifies that the provided presigned signature is valid according to the 0x Protocol smart contracts
     * @param   provider      Web3 provider to use for all JSON RPC requests
     * @param   data          The hex encoded data signed by the supplied signature
     * @param   signerAddress The hex encoded address that signed the data, producing the supplied signature.
     * @return  Whether the data was preSigned by the supplied signerAddress
     */
    isValidPresignedSignatureAsync: function (provider, data, signerAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var exchangeContract, isValid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assert_1.assert.isWeb3Provider('provider', provider);
                        assert_1.assert.isHexString('data', data);
                        assert_1.assert.isETHAddressHex('signerAddress', signerAddress);
                        exchangeContract = new exchange_1.ExchangeContract(artifacts_1.artifacts.Exchange.compilerOutput.abi, signerAddress, provider);
                        return [4 /*yield*/, exchangeContract.preSigned.callAsync(data, signerAddress)];
                    case 1:
                        isValid = _a.sent();
                        return [2 /*return*/, isValid];
                }
            });
        });
    },
    /**
     * Verifies that the provided wallet signature is valid according to the 0x Protocol smart contracts
     * @param   provider      Web3 provider to use for all JSON RPC requests
     * @param   data          The hex encoded data signed by the supplied signature.
     * @param   signature     A hex encoded presigned 0x Protocol signature made up of: [SignatureType.Presigned]
     * @param   signerAddress The hex encoded address that signed the data, producing the supplied signature.
     * @return  Whether the data was preSigned by the supplied signerAddress.
     */
    isValidWalletSignatureAsync: function (provider, data, signature, signerAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var signatureWithoutType, walletContract, isValid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assert_1.assert.isWeb3Provider('provider', provider);
                        assert_1.assert.isHexString('data', data);
                        assert_1.assert.isHexString('signature', signature);
                        assert_1.assert.isETHAddressHex('signerAddress', signerAddress);
                        signatureWithoutType = signature.slice(-2);
                        walletContract = new i_wallet_1.IWalletContract(artifacts_1.artifacts.IWallet.compilerOutput.abi, signerAddress, provider);
                        return [4 /*yield*/, walletContract.isValidSignature.callAsync(data, signatureWithoutType)];
                    case 1:
                        isValid = _a.sent();
                        return [2 /*return*/, isValid];
                }
            });
        });
    },
    /**
     * Verifies that the provided validator signature is valid according to the 0x Protocol smart contracts
     * @param   provider      Web3 provider to use for all JSON RPC requests
     * @param   data          The hex encoded data signed by the supplied signature.
     * @param   signature     A hex encoded presigned 0x Protocol signature made up of: [SignatureType.Presigned]
     * @param   signerAddress The hex encoded address that signed the data, producing the supplied signature.
     * @return  Whether the data was preSigned by the supplied signerAddress.
     */
    isValidValidatorSignatureAsync: function (provider, data, signature, signerAddress) {
        return __awaiter(this, void 0, void 0, function () {
            var validatorSignature, exchangeContract, isValidatorApproved, validatorContract, isValid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assert_1.assert.isWeb3Provider('provider', provider);
                        assert_1.assert.isHexString('data', data);
                        assert_1.assert.isHexString('signature', signature);
                        assert_1.assert.isETHAddressHex('signerAddress', signerAddress);
                        validatorSignature = parseValidatorSignature(signature);
                        exchangeContract = new exchange_1.ExchangeContract(artifacts_1.artifacts.Exchange.compilerOutput.abi, signerAddress, provider);
                        return [4 /*yield*/, exchangeContract.allowedValidators.callAsync(signerAddress, validatorSignature.validatorAddress)];
                    case 1:
                        isValidatorApproved = _a.sent();
                        if (!isValidatorApproved) {
                            throw new Error("Validator " + validatorSignature.validatorAddress + " was not pre-approved by " + signerAddress + ".");
                        }
                        validatorContract = new i_validator_1.IValidatorContract(artifacts_1.artifacts.IValidator.compilerOutput.abi, signerAddress, provider);
                        return [4 /*yield*/, validatorContract.isValidSignature.callAsync(data, signerAddress, validatorSignature.signature)];
                    case 2:
                        isValid = _a.sent();
                        return [2 /*return*/, isValid];
                }
            });
        });
    },
    /**
     * Checks if the supplied elliptic curve signature corresponds to signing `data` with
     * the private key corresponding to `signerAddress`
     * @param   data          The hex encoded data signed by the supplied signature.
     * @param   signature     An object containing the elliptic curve signature parameters.
     * @param   signerAddress The hex encoded address that signed the data, producing the supplied signature.
     * @return Whether the ECSignature is valid.
     */
    isValidECSignature: function (data, signature, signerAddress) {
        assert_1.assert.isHexString('data', data);
        assert_1.assert.doesConformToSchema('signature', signature, json_schemas_1.schemas.ecSignatureSchema);
        assert_1.assert.isETHAddressHex('signerAddress', signerAddress);
        var normalizedSignerAddress = signerAddress.toLowerCase();
        var msgHashBuff = ethUtil.toBuffer(data);
        try {
            var pubKey = ethUtil.ecrecover(msgHashBuff, signature.v, ethUtil.toBuffer(signature.r), ethUtil.toBuffer(signature.s));
            var retrievedAddress = ethUtil.bufferToHex(ethUtil.pubToAddress(pubKey));
            var normalizedRetrievedAddress = retrievedAddress.toLowerCase();
            return normalizedRetrievedAddress === normalizedSignerAddress;
        }
        catch (err) {
            return false;
        }
    },
    /**
     * Signs an orderHash and returns it's elliptic curve signature and signature type.
     * This method currently supports TestRPC, Geth and Parity above and below V1.6.6
     * @param   orderHash       Hex encoded orderHash to sign.
     * @param   signerAddress   The hex encoded Ethereum address you wish to sign it with. This address
     *          must be available via the Provider supplied to 0x.js.
     * @param   signerType Different signers add/require different prefixes to be prepended to the message being signed.
     *          Since we cannot know ahead of time which signer you are using, you must supply a SignerType.
     * @return  A hex encoded string containing the Elliptic curve signature generated by signing the orderHash and the Signature Type.
     */
    ecSignOrderHashAsync: function (provider, orderHash, signerAddress, signerType) {
        return __awaiter(this, void 0, void 0, function () {
            var web3Wrapper, normalizedSignerAddress, msgHashHex, prefixedMsgHashHex, signature, validVParamValues, ecSignatureRSV, isValidRSVSignature, convertedSignatureHex, ecSignatureVRS, isValidVRSSignature, convertedSignatureHex;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        assert_1.assert.isWeb3Provider('provider', provider);
                        assert_1.assert.isHexString('orderHash', orderHash);
                        assert_1.assert.isETHAddressHex('signerAddress', signerAddress);
                        web3Wrapper = new web3_wrapper_1.Web3Wrapper(provider);
                        return [4 /*yield*/, assert_1.assert.isSenderAddressAsync('signerAddress', signerAddress, web3Wrapper)];
                    case 1:
                        _a.sent();
                        normalizedSignerAddress = signerAddress.toLowerCase();
                        msgHashHex = orderHash;
                        prefixedMsgHashHex = exports.signatureUtils.addSignedMessagePrefix(orderHash, signerType);
                        // Metamask incorrectly implements eth_sign and does not prefix the message as per the spec
                        // Source: https://github.com/MetaMask/metamask-extension/commit/a9d36860bec424dcee8db043d3e7da6a5ff5672e
                        if (signerType === types_1.SignerType.Metamask) {
                            msgHashHex = prefixedMsgHashHex;
                        }
                        return [4 /*yield*/, web3Wrapper.signMessageAsync(normalizedSignerAddress, msgHashHex)];
                    case 2:
                        signature = _a.sent();
                        validVParamValues = [27, 28];
                        ecSignatureRSV = parseSignatureHexAsRSV(signature);
                        if (_.includes(validVParamValues, ecSignatureRSV.v)) {
                            isValidRSVSignature = exports.signatureUtils.isValidECSignature(prefixedMsgHashHex, ecSignatureRSV, normalizedSignerAddress);
                            if (isValidRSVSignature) {
                                convertedSignatureHex = exports.signatureUtils.convertECSignatureToSignatureHex(ecSignatureRSV, signerType);
                                return [2 /*return*/, convertedSignatureHex];
                            }
                        }
                        ecSignatureVRS = parseSignatureHexAsVRS(signature);
                        if (_.includes(validVParamValues, ecSignatureVRS.v)) {
                            isValidVRSSignature = exports.signatureUtils.isValidECSignature(prefixedMsgHashHex, ecSignatureVRS, normalizedSignerAddress);
                            if (isValidVRSSignature) {
                                convertedSignatureHex = exports.signatureUtils.convertECSignatureToSignatureHex(ecSignatureVRS, signerType);
                                return [2 /*return*/, convertedSignatureHex];
                            }
                        }
                        throw new Error(types_2.OrderError.InvalidSignature);
                }
            });
        });
    },
    /**
     * Combines ECSignature with V,R,S and the relevant signature type for use in 0x protocol
     * @param ecSignature The ECSignature of the signed data
     * @param signerType The SignerType of the signed data
     * @return Hex encoded string of signature (v,r,s) with Signature Type
     */
    convertECSignatureToSignatureHex: function (ecSignature, signerType) {
        var signatureBuffer = Buffer.concat([
            ethUtil.toBuffer(ecSignature.v),
            ethUtil.toBuffer(ecSignature.r),
            ethUtil.toBuffer(ecSignature.s),
        ]);
        var signatureHex = "0x" + signatureBuffer.toString('hex');
        var signatureType;
        switch (signerType) {
            case types_1.SignerType.Metamask:
            case types_1.SignerType.Ledger:
            case types_1.SignerType.Default: {
                signatureType = types_1.SignatureType.EthSign;
                break;
            }
            default:
                throw new Error("Unrecognized SignerType: " + signerType);
        }
        var signatureWithType = exports.signatureUtils.convertToSignatureWithType(signatureHex, signatureType);
        return signatureWithType;
    },
    /**
     * Combines the signature proof and the Signature Type.
     * @param signature The hex encoded signature proof
     * @param signatureType The signature type, i.e EthSign, Wallet etc.
     * @return Hex encoded string of signature proof with Signature Type
     */
    convertToSignatureWithType: function (signature, signatureType) {
        var signatureBuffer = Buffer.concat([ethUtil.toBuffer(signature), ethUtil.toBuffer(signatureType)]);
        var signatureHex = "0x" + signatureBuffer.toString('hex');
        return signatureHex;
    },
    /**
     * Adds the relevant prefix to the message being signed.
     * @param message Message to sign
     * @param signerType The type of message prefix to add for a given SignerType. Different signers expect
     *                          specific message prefixes.
     * @return Prefixed message
     */
    addSignedMessagePrefix: function (message, signerType) {
        if (signerType === void 0) { signerType = types_1.SignerType.Default; }
        assert_1.assert.isString('message', message);
        assert_1.assert.doesBelongToStringEnum('signerType', signerType, types_1.SignerType);
        switch (signerType) {
            case types_1.SignerType.Metamask:
            case types_1.SignerType.Ledger:
            case types_1.SignerType.Default: {
                var msgBuff = ethUtil.toBuffer(message);
                var prefixedMsgBuff = ethUtil.hashPersonalMessage(msgBuff);
                var prefixedMsgHex = ethUtil.bufferToHex(prefixedMsgBuff);
                return prefixedMsgHex;
            }
            default:
                throw new Error("Unrecognized SignerType: " + signerType);
        }
    },
    /**
     * Parse a 0x protocol hex-encoded signature string into it's ECSignature components
     * @param signature A hex encoded ecSignature 0x Protocol signature
     * @return An ECSignature object with r,s,v parameters
     */
    parseECSignature: function (signature) {
        assert_1.assert.isHexString('signature', signature);
        var ecSignatureTypes = [types_1.SignatureType.EthSign, types_1.SignatureType.EIP712];
        assert_1.assert.isOneOfExpectedSignatureTypes(signature, ecSignatureTypes);
        // tslint:disable-next-line:custom-no-magic-numbers
        var vrsHex = signature.slice(0, -2);
        var ecSignature = parseSignatureHexAsVRS(vrsHex);
        return ecSignature;
    },
};
function parseValidatorSignature(signature) {
    assert_1.assert.isOneOfExpectedSignatureTypes(signature, [types_1.SignatureType.Validator]);
    // tslint:disable:custom-no-magic-numbers
    var validatorSignature = {
        validatorAddress: signature.slice(-22, -2),
        signature: signature.slice(0, -22),
    };
    // tslint:enable:custom-no-magic-numbers
    return validatorSignature;
}
function parseSignatureHexAsVRS(signatureHex) {
    var signatureBuffer = ethUtil.toBuffer(signatureHex);
    var v = signatureBuffer[0];
    // HACK: Sometimes v is returned as [0, 1] and sometimes as [27, 28]
    // If it is returned as [0, 1], add 27 to both so it becomes [27, 28]
    var lowestValidV = 27;
    var isProperlyFormattedV = v >= lowestValidV;
    if (!isProperlyFormattedV) {
        v += lowestValidV;
    }
    // signatureBuffer contains vrs
    var vEndIndex = 1;
    var rsIndex = 33;
    var r = signatureBuffer.slice(vEndIndex, rsIndex);
    var sEndIndex = 65;
    var s = signatureBuffer.slice(rsIndex, sEndIndex);
    var ecSignature = {
        v: v,
        r: ethUtil.bufferToHex(r),
        s: ethUtil.bufferToHex(s),
    };
    return ecSignature;
}
function parseSignatureHexAsRSV(signatureHex) {
    var _a = ethUtil.fromRpcSig(signatureHex), v = _a.v, r = _a.r, s = _a.s;
    var ecSignature = {
        v: v,
        r: ethUtil.bufferToHex(r),
        s: ethUtil.bufferToHex(s),
    };
    return ecSignature;
}
//# sourceMappingURL=signature_utils.js.map